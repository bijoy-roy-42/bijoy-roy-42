using ConnectFour;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace ConnectFour 
{
    //abstract base class for players
    public abstract class Player
    {
        public string Name { get; protected set; }
        public char Symbol { get; protected set; }

        protected Player(string name, char symbol)
        {
            Name = name;
            Symbol = symbol;
        }

        //abstract method to get player moves
        public abstract int GetMove(Board board);
    }
}
//human player class
public class HumanPlayer : Player
{
    public HumanPlayer(string name, char symbol) : base(name, symbol) { }

    public override int GetMove(Board board)
    {
        while (true)
        {
            try
            {
                Console.Write($"{Name}, enter column (1-7) to drop your {Symbol}: ");
                string input = Console.ReadLine();
                if (!int.TryParse(input, out int column) || column < 1 || column > 7)
                {
                    throw new ArgumentException("Please enter a number between 1 and 7.");
                }
                // Convert to 0-based index
                column--;
                if (!board.IsValidMove(column))
                {
                    throw new InvalidOperationException("This column is full. Choose another column.");
                }
                return column;
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine($"Input Error: {ex.Message}");
            }
            catch (InvalidOperationException ex)
            {
                Console.WriteLine($"Move Error: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Unexpected Error: {ex.Message}");
            }
        }
    }
}
//computer player class with AI
public class ComputerPlayer : Player
{
    private Random random = new Random();

    public ComputerPlayer(string name, char symbol) : base(name, symbol) { }

    public override int GetMove(Board board)
    {
        // Simple AI implementation: Prefer center column, then random
        if (board.IsValidMove(3)) return 3;
        List<int> validMoves = Enumerable.Range(0, Board.Columns).Where(c => board.IsValidMove(c)).ToList();
        return validMoves[random.Next(validMoves.Count)];
    }
}
//gameboard class implementation
public class Board
{
    public const int Rows = 6;
    public const int Columns = 7;
    private char[,] grid;

    public Board()
    {
        grid = new char[Rows, Columns];
        for (int r = 0; r < Rows; r++)
            for (int c = 0; c < Columns; c++)
                grid[r, c] = ' ';
    }

    public bool IsValidMove(int column)
    {
        return column >= 0 && column < Columns && grid[0, column] == ' ';
    }

    public bool MakeMove(int column, char symbol)
    {
        for (int r = Rows - 1; r >= 0; r--)
        {
            if (grid[r, column] == ' ')
            {
                grid[r, column] = symbol;
                return true;
            }
        }
        return false;
    }

   
public bool CheckWin(char symbol)
{
    // Check horizontal, vertical, and diagonal (both directions)
    return CheckHorizontalWin(symbol) || CheckVerticalWin(symbol) || CheckDiagonalWin(symbol);
}

private bool CheckHorizontalWin(char symbol)
{
    for (int r = 0; r < Rows; r++)
        for (int c = 0; c <= Columns - 4; c++)
            if (grid[r, c] == symbol && grid[r, c + 1] == symbol && grid[r, c + 2] == symbol && grid[r, c + 3] == symbol)
                return true;
    return false;
}

private bool CheckVerticalWin(char symbol)
{
    for (int r = 0; r <= Rows - 4; r++)
        for (int c = 0; c < Columns; c++)
            if (grid[r, c] == symbol && grid[r + 1, c] == symbol && grid[r + 2, c] == symbol && grid[r + 3, c] == symbol)
                return true;
    return false;
}

private bool CheckDiagonalWin(char symbol)
{
    for (int r = 0; r <= Rows - 4; r++)
    {
        for (int c = 0; c <= Columns - 4; c++)
        {
            if (grid[r, c] == symbol && grid[r + 1, c + 1] == symbol && grid[r + 2, c + 2] == symbol && grid[r + 3, c + 3] == symbol)
                return true;
            if (grid[r + 3, c] == symbol && grid[r + 2, c + 1] == symbol && grid[r + 1, c + 2] == symbol && grid[r, c + 3] == symbol)
                return true;
        }
    }
    return false;
}

public bool IsFull()
    {
        return !Enumerable.Range(0, Columns).Any(c => IsValidMove(c));
    }

    public void Display()
    {
        try
        {
            for (int r = 0; r < Rows; r++)
            {
                Console.Write("|");
                for (int c = 0; c < Columns; c++)
                {
                    Console.Write($" {grid[r, c]} |");
                }
                Console.WriteLine();
            }
            Console.WriteLine("-----------------------------");
            Console.WriteLine("  1   2   3   4   5   6   7  ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error displaying board: {ex.Message}");
        }
    }
}
//class to manage the game logic
public class Game
{
    private Board board;
    private Player player1;
    private Player player2;
    private Player currentPlayer;

    public Game(Player p1, Player p2)
    {
        board = new Board();
        player1 = p1;
        player2 = p2;
        currentPlayer = player1;
    }

    public void Play()
    {
        while (true)
        {
            try
            {
                board.Display();
                int move = currentPlayer.GetMove(board);
                if (board.MakeMove(move, currentPlayer.Symbol))
                {
                    if (board.CheckWin(currentPlayer.Symbol))
                    {
                        board.Display();
                        Console.WriteLine($"{currentPlayer.Name} wins!");
                        break;
                    }
                    if (board.IsFull())
                    {
                        board.Display();
                        Console.WriteLine("It's a draw!");
                        break;
                    }
                    currentPlayer = (currentPlayer == player1) ? player2 : player1;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
                Console.WriteLine("The game will continue. Please try your move again.");
            }
        }
    }
}
//Main program class to start the game
class Program
{
    static void Main(string[] args)
    {
        try
        {
            Console.WriteLine("Welcome to Connect Four!");
            while (true)
            {
                Console.WriteLine("1. Play against another player");
                Console.WriteLine("2. Play against the computer");
                Console.WriteLine("3. Exit");
                Console.Write("Enter your choice (1-3): ");

                if (int.TryParse(Console.ReadLine(), out int choice))
                {
                    if (choice == 1 || choice == 2)
                    {
                        Player player1 = new HumanPlayer("Player 1", 'X');
                        Player player2;

                        if (choice == 1)
                        {
                            player2 = new HumanPlayer("Player 2", 'O');
                        }
                        else
                        {
                            player2 = new ComputerPlayer("Computer", 'O');
                        }

                        Game game = new Game(player1, player2);
                        game.Play();
                    }
                    else if (choice == 3)
                    {
                        Console.WriteLine("Thanks for playing!");
                        break;
                    }
                    else
                    {
                        Console.WriteLine("Invalid choice. Please try again.");
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter a number.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"A critical error occurred: {ex.Message}");
            Console.WriteLine("The program will now exit.");
        }
    }
}
